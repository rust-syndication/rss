(function() {
    var type_impls = Object.fromEntries([["tinystr",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsULE-for-TinyAsciiStr%3CN%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tinystr/ule.rs.html#34-46\">source</a><a href=\"#impl-AsULE-for-TinyAsciiStr%3CN%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"zerovec/ule/trait.AsULE.html\" title=\"trait zerovec::ule::AsULE\">AsULE</a> for <a class=\"struct\" href=\"tinystr/struct.TinyAsciiStr.html\" title=\"struct tinystr::TinyAsciiStr\">TinyAsciiStr</a>&lt;N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.ULE\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/tinystr/ule.rs.html#35\">source</a><a href=\"#associatedtype.ULE\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"zerovec/ule/trait.AsULE.html#associatedtype.ULE\" class=\"associatedtype\">ULE</a> = <a class=\"struct\" href=\"tinystr/struct.TinyAsciiStr.html\" title=\"struct tinystr::TinyAsciiStr\">TinyAsciiStr</a>&lt;N&gt;</h4></section></summary><div class='docblock'>The ULE type corresponding to <code>Self</code>. <a href=\"zerovec/ule/trait.AsULE.html#associatedtype.ULE\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_unaligned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tinystr/ule.rs.html#38-40\">source</a><a href=\"#method.to_unaligned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/ule/trait.AsULE.html#tymethod.to_unaligned\" class=\"fn\">to_unaligned</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"zerovec/ule/trait.AsULE.html#associatedtype.ULE\" title=\"type zerovec::ule::AsULE::ULE\">ULE</a></h4></section></summary><div class='docblock'>Converts from <code>Self</code> to <code>Self::ULE</code>. <a href=\"zerovec/ule/trait.AsULE.html#tymethod.to_unaligned\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_unaligned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tinystr/ule.rs.html#43-45\">source</a><a href=\"#method.from_unaligned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/ule/trait.AsULE.html#tymethod.from_unaligned\" class=\"fn\">from_unaligned</a>(unaligned: Self::<a class=\"associatedtype\" href=\"zerovec/ule/trait.AsULE.html#associatedtype.ULE\" title=\"type zerovec::ule::AsULE::ULE\">ULE</a>) -&gt; Self</h4></section></summary><div class='docblock'>Converts from <code>Self::ULE</code> to <code>Self</code>. <a href=\"zerovec/ule/trait.AsULE.html#tymethod.from_unaligned\">Read more</a></div></details></div></details>","AsULE","tinystr::TinyStr4","tinystr::TinyStr8","tinystr::TinyStr16"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-TinyAsciiStr%3CN%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tinystr/ascii.rs.html#13\">source</a><a href=\"#impl-Clone-for-TinyAsciiStr%3CN%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"tinystr/struct.TinyAsciiStr.html\" title=\"struct tinystr::TinyAsciiStr\">TinyAsciiStr</a>&lt;N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tinystr/ascii.rs.html#13\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"tinystr/struct.TinyAsciiStr.html\" title=\"struct tinystr::TinyAsciiStr\">TinyAsciiStr</a>&lt;N&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.83.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.83.0/src/core/clone.rs.html#174\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.83.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","tinystr::TinyStr4","tinystr::TinyStr8","tinystr::TinyStr16"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-TinyAsciiStr%3CN%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tinystr/ascii.rs.html#636-640\">source</a><a href=\"#impl-Debug-for-TinyAsciiStr%3CN%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"tinystr/struct.TinyAsciiStr.html\" title=\"struct tinystr::TinyAsciiStr\">TinyAsciiStr</a>&lt;N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tinystr/ascii.rs.html#637-639\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.83.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.83.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.83.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","tinystr::TinyStr4","tinystr::TinyStr8","tinystr::TinyStr16"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deref-for-TinyAsciiStr%3CN%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tinystr/ascii.rs.html#648-654\">source</a><a href=\"#impl-Deref-for-TinyAsciiStr%3CN%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a> for <a class=\"struct\" href=\"tinystr/struct.TinyAsciiStr.html\" title=\"struct tinystr::TinyAsciiStr\">TinyAsciiStr</a>&lt;N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Target\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/tinystr/ascii.rs.html#649\">source</a><a href=\"#associatedtype.Target\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.83.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" class=\"associatedtype\">Target</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>The resulting type after dereferencing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tinystr/ascii.rs.html#651-653\">source</a><a href=\"#method.deref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/ops/deref/trait.Deref.html#tymethod.deref\" class=\"fn\">deref</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Dereferences the value.</div></details></div></details>","Deref","tinystr::TinyStr4","tinystr::TinyStr8","tinystr::TinyStr16"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-TinyAsciiStr%3CN%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tinystr/ascii.rs.html#642-646\">source</a><a href=\"#impl-Display-for-TinyAsciiStr%3CN%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> for <a class=\"struct\" href=\"tinystr/struct.TinyAsciiStr.html\" title=\"struct tinystr::TinyAsciiStr\">TinyAsciiStr</a>&lt;N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tinystr/ascii.rs.html#643-645\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.83.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.83.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.83.0/core/fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details>","Display","tinystr::TinyStr4","tinystr::TinyStr8","tinystr::TinyStr16"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromStr-for-TinyAsciiStr%3CN%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tinystr/ascii.rs.html#656-662\">source</a><a href=\"#impl-FromStr-for-TinyAsciiStr%3CN%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/str/traits/trait.FromStr.html\" title=\"trait core::str::traits::FromStr\">FromStr</a> for <a class=\"struct\" href=\"tinystr/struct.TinyAsciiStr.html\" title=\"struct tinystr::TinyAsciiStr\">TinyAsciiStr</a>&lt;N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Err\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/tinystr/ascii.rs.html#657\">source</a><a href=\"#associatedtype.Err\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.83.0/core/str/traits/trait.FromStr.html#associatedtype.Err\" class=\"associatedtype\">Err</a> = <a class=\"enum\" href=\"tinystr/enum.TinyStrError.html\" title=\"enum tinystr::TinyStrError\">TinyStrError</a></h4></section></summary><div class='docblock'>The associated error which can be returned from parsing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tinystr/ascii.rs.html#659-661\">source</a><a href=\"#method.from_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/str/traits/trait.FromStr.html#tymethod.from_str\" class=\"fn\">from_str</a>(s: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.83.0/core/str/traits/trait.FromStr.html#associatedtype.Err\" title=\"type core::str::traits::FromStr::Err\">Err</a>&gt;</h4></section></summary><div class='docblock'>Parses a string <code>s</code> to return a value of this type. <a href=\"https://doc.rust-lang.org/1.83.0/core/str/traits/trait.FromStr.html#tymethod.from_str\">Read more</a></div></details></div></details>","FromStr","tinystr::TinyStr4","tinystr::TinyStr8","tinystr::TinyStr16"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-TinyAsciiStr%3CN%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tinystr/ascii.rs.html#13\">source</a><a href=\"#impl-Hash-for-TinyAsciiStr%3CN%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"tinystr/struct.TinyAsciiStr.html\" title=\"struct tinystr::TinyAsciiStr\">TinyAsciiStr</a>&lt;N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tinystr/ascii.rs.html#13\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;__H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.reference.html\">&amp;mut __H</a>)</h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/1.83.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.83.0/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.83.0/src/core/hash/mod.rs.html#235-237\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[Self], state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/1.83.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.83.0/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","tinystr::TinyStr4","tinystr::TinyStr8","tinystr::TinyStr16"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-TinyAsciiStr%3CN%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tinystr/ascii.rs.html#13\">source</a><a href=\"#impl-Ord-for-TinyAsciiStr%3CN%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"tinystr/struct.TinyAsciiStr.html\" title=\"struct tinystr::TinyAsciiStr\">TinyAsciiStr</a>&lt;N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tinystr/ascii.rs.html#13\">source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"tinystr/struct.TinyAsciiStr.html\" title=\"struct tinystr::TinyAsciiStr\">TinyAsciiStr</a>&lt;N&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/1.83.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.83.0/src/core/cmp.rs.html#980-982\">source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.83.0/src/core/cmp.rs.html#1001-1003\">source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.83.0/src/core/cmp.rs.html#1027-1029\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","tinystr::TinyStr4","tinystr::TinyStr8","tinystr::TinyStr16"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26str%3E-for-TinyAsciiStr%3CN%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tinystr/ascii.rs.html#670-674\">source</a><a href=\"#impl-PartialEq%3C%26str%3E-for-TinyAsciiStr%3CN%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"tinystr/struct.TinyAsciiStr.html\" title=\"struct tinystr::TinyAsciiStr\">TinyAsciiStr</a>&lt;N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tinystr/ascii.rs.html#671-673\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.83.0/src/core/cmp.rs.html#261\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<&str>","tinystr::TinyStr4","tinystr::TinyStr8","tinystr::TinyStr16"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CString%3E-for-TinyAsciiStr%3CN%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tinystr/ascii.rs.html#677-681\">source</a><a href=\"#impl-PartialEq%3CString%3E-for-TinyAsciiStr%3CN%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.83.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt; for <a class=\"struct\" href=\"tinystr/struct.TinyAsciiStr.html\" title=\"struct tinystr::TinyAsciiStr\">TinyAsciiStr</a>&lt;N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tinystr/ascii.rs.html#678-680\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.83.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.83.0/src/core/cmp.rs.html#261\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<String>","tinystr::TinyStr4","tinystr::TinyStr8","tinystr::TinyStr16"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3Cstr%3E-for-TinyAsciiStr%3CN%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tinystr/ascii.rs.html#664-668\">source</a><a href=\"#impl-PartialEq%3Cstr%3E-for-TinyAsciiStr%3CN%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"tinystr/struct.TinyAsciiStr.html\" title=\"struct tinystr::TinyAsciiStr\">TinyAsciiStr</a>&lt;N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tinystr/ascii.rs.html#665-667\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.83.0/src/core/cmp.rs.html#261\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<str>","tinystr::TinyStr4","tinystr::TinyStr8","tinystr::TinyStr16"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-TinyAsciiStr%3CN%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tinystr/ascii.rs.html#13\">source</a><a href=\"#impl-PartialEq-for-TinyAsciiStr%3CN%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"tinystr/struct.TinyAsciiStr.html\" title=\"struct tinystr::TinyAsciiStr\">TinyAsciiStr</a>&lt;N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tinystr/ascii.rs.html#13\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"tinystr/struct.TinyAsciiStr.html\" title=\"struct tinystr::TinyAsciiStr\">TinyAsciiStr</a>&lt;N&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.83.0/src/core/cmp.rs.html#261\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","tinystr::TinyStr4","tinystr::TinyStr8","tinystr::TinyStr16"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-TinyAsciiStr%3CN%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tinystr/ascii.rs.html#13\">source</a><a href=\"#impl-PartialOrd-for-TinyAsciiStr%3CN%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"struct\" href=\"tinystr/struct.TinyAsciiStr.html\" title=\"struct tinystr::TinyAsciiStr\">TinyAsciiStr</a>&lt;N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tinystr/ascii.rs.html#13\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"tinystr/struct.TinyAsciiStr.html\" title=\"struct tinystr::TinyAsciiStr\">TinyAsciiStr</a>&lt;N&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.83.0/src/core/cmp.rs.html#1335\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.83.0/src/core/cmp.rs.html#1353\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.83.0/src/core/cmp.rs.html#1371\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.83.0/src/core/cmp.rs.html#1389\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","tinystr::TinyStr4","tinystr::TinyStr8","tinystr::TinyStr16"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TinyAsciiStr%3CN%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tinystr/ascii.rs.html#18-215\">source</a><a href=\"#impl-TinyAsciiStr%3CN%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.usize.html\">usize</a>&gt; <a class=\"struct\" href=\"tinystr/struct.TinyAsciiStr.html\" title=\"struct tinystr::TinyAsciiStr\">TinyAsciiStr</a>&lt;N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_bytes\" class=\"method\"><a class=\"src rightside\" href=\"src/tinystr/ascii.rs.html#21-23\">source</a><h4 class=\"code-header\">pub const fn <a href=\"tinystr/struct.TinyAsciiStr.html#tymethod.from_bytes\" class=\"fn\">from_bytes</a>(bytes: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"enum\" href=\"tinystr/enum.TinyStrError.html\" title=\"enum tinystr::TinyStrError\">TinyStrError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a <code>TinyAsciiStr&lt;N&gt;</code> from the given byte slice.\n<code>bytes</code> may contain at most <code>N</code> non-null ASCII bytes.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_bytes_lossy\" class=\"method\"><a class=\"src rightside\" href=\"src/tinystr/ascii.rs.html#31-54\">source</a><h4 class=\"code-header\">pub const fn <a href=\"tinystr/struct.TinyAsciiStr.html#tymethod.from_bytes_lossy\" class=\"fn\">from_bytes_lossy</a>(bytes: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.u8.html\">u8</a>]) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Creates a <code>TinyAsciiStr&lt;N&gt;</code> from a byte slice, replacing invalid bytes.</p>\n<p>Null and non-ASCII bytes (i.e. those outside the range <code>0x01..=0x7F</code>)\nwill be replaced with the ‘?’ character.</p>\n<p>The input slice will be truncated if its length exceeds <code>N</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from_raw\" class=\"method\"><a class=\"src rightside\" href=\"src/tinystr/ascii.rs.html#76-78\">source</a><h4 class=\"code-header\">pub const fn <a href=\"tinystr/struct.TinyAsciiStr.html#tymethod.try_from_raw\" class=\"fn\">try_from_raw</a>(raw: [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.array.html\">N</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"enum\" href=\"tinystr/enum.TinyStrError.html\" title=\"enum tinystr::TinyStrError\">TinyStrError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to parse a fixed-length byte array to a <code>TinyAsciiStr</code>.</p>\n<p>The byte array may contain trailing NUL bytes.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tinystr::tinystr;\n<span class=\"kw\">use </span>tinystr::TinyAsciiStr;\n\n<span class=\"macro\">assert_eq!</span>(\n    TinyAsciiStr::&lt;<span class=\"number\">3</span>&gt;::try_from_raw(<span class=\"kw-2\">*</span><span class=\"string\">b\"GB\\0\"</span>),\n    <span class=\"prelude-val\">Ok</span>(<span class=\"macro\">tinystr!</span>(<span class=\"number\">3</span>, <span class=\"string\">\"GB\"</span>))\n);\n<span class=\"macro\">assert_eq!</span>(\n    TinyAsciiStr::&lt;<span class=\"number\">3</span>&gt;::try_from_raw(<span class=\"kw-2\">*</span><span class=\"string\">b\"USD\"</span>),\n    <span class=\"prelude-val\">Ok</span>(<span class=\"macro\">tinystr!</span>(<span class=\"number\">3</span>, <span class=\"string\">\"USD\"</span>))\n);\n<span class=\"macro\">assert!</span>(<span class=\"macro\">matches!</span>(TinyAsciiStr::&lt;<span class=\"number\">3</span>&gt;::try_from_raw(<span class=\"kw-2\">*</span><span class=\"string\">b\"\\0A\\0\"</span>), <span class=\"prelude-val\">Err</span>(<span class=\"kw\">_</span>)));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_bytes_manual_slice\" class=\"method\"><a class=\"src rightside\" href=\"src/tinystr/ascii.rs.html#82-88\">source</a><h4 class=\"code-header\">pub const fn <a href=\"tinystr/struct.TinyAsciiStr.html#tymethod.from_bytes_manual_slice\" class=\"fn\">from_bytes_manual_slice</a>(\n    bytes: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.u8.html\">u8</a>],\n    start: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.usize.html\">usize</a>,\n    end: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"enum\" href=\"tinystr/enum.TinyStrError.html\" title=\"enum tinystr::TinyStrError\">TinyStrError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Equivalent to <a href=\"tinystr/struct.TinyAsciiStr.html#method.from_bytes\" title=\"associated function tinystr::TinyAsciiStr::from_bytes\"><code>from_bytes(bytes[start..end])</code></a>,\nbut callable in a <code>const</code> context (which range indexing is not).</p>\n</div></details><section id=\"method.from_str\" class=\"method\"><a class=\"src rightside\" href=\"src/tinystr/ascii.rs.html#136-138\">source</a><h4 class=\"code-header\">pub const fn <a href=\"tinystr/struct.TinyAsciiStr.html#tymethod.from_str\" class=\"fn\">from_str</a>(s: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"enum\" href=\"tinystr/enum.TinyStrError.html\" title=\"enum tinystr::TinyStrError\">TinyStrError</a>&gt;</h4></section><section id=\"method.as_str\" class=\"method\"><a class=\"src rightside\" href=\"src/tinystr/ascii.rs.html#141-144\">source</a><h4 class=\"code-header\">pub const fn <a href=\"tinystr/struct.TinyAsciiStr.html#tymethod.as_str\" class=\"fn\">as_str</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.str.html\">str</a></h4></section><section id=\"method.len\" class=\"method\"><a class=\"src rightside\" href=\"src/tinystr/ascii.rs.html#148-161\">source</a><h4 class=\"code-header\">pub const fn <a href=\"tinystr/struct.TinyAsciiStr.html#tymethod.len\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.usize.html\">usize</a></h4></section><section id=\"method.is_empty\" class=\"method\"><a class=\"src rightside\" href=\"src/tinystr/ascii.rs.html#165-167\">source</a><h4 class=\"code-header\">pub const fn <a href=\"tinystr/struct.TinyAsciiStr.html#tymethod.is_empty\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.bool.html\">bool</a></h4></section><section id=\"method.as_bytes\" class=\"method\"><a class=\"src rightside\" href=\"src/tinystr/ascii.rs.html#171-177\">source</a><h4 class=\"code-header\">pub const fn <a href=\"tinystr/struct.TinyAsciiStr.html#tymethod.as_bytes\" class=\"fn\">as_bytes</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.u8.html\">u8</a>]</h4></section><section id=\"method.all_bytes\" class=\"method\"><a class=\"src rightside\" href=\"src/tinystr/ascii.rs.html#181-184\">source</a><h4 class=\"code-header\">pub const fn <a href=\"tinystr/struct.TinyAsciiStr.html#tymethod.all_bytes\" class=\"fn\">all_bytes</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.array.html\">N</a>]</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.resize\" class=\"method\"><a class=\"src rightside\" href=\"src/tinystr/ascii.rs.html#192-204\">source</a><h4 class=\"code-header\">pub const fn <a href=\"tinystr/struct.TinyAsciiStr.html#tymethod.resize\" class=\"fn\">resize</a>&lt;const M: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.usize.html\">usize</a>&gt;(self) -&gt; <a class=\"struct\" href=\"tinystr/struct.TinyAsciiStr.html\" title=\"struct tinystr::TinyAsciiStr\">TinyAsciiStr</a>&lt;M&gt;</h4></section></summary><div class=\"docblock\"><p>Resizes a <code>TinyAsciiStr&lt;N&gt;</code> to a <code>TinyAsciiStr&lt;M&gt;</code>.</p>\n<p>If <code>M &lt; len()</code> the string gets truncated, otherwise only the\nmemory representation changes.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_bytes_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/tinystr/ascii.rs.html#210-214\">source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"tinystr/struct.TinyAsciiStr.html#tymethod.from_bytes_unchecked\" class=\"fn\">from_bytes_unchecked</a>(bytes: [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.array.html\">N</a>]) -&gt; Self</h4></section></summary><div class=\"docblock\"><h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>Must be called with a bytes array made of valid ASCII bytes, with no null bytes\nbetween ASCII characters</p>\n</div></details></div></details>",0,"tinystr::TinyStr4","tinystr::TinyStr8","tinystr::TinyStr16"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TinyAsciiStr%3CN%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tinystr/ascii.rs.html#282-527\">source</a><a href=\"#impl-TinyAsciiStr%3CN%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.usize.html\">usize</a>&gt; <a class=\"struct\" href=\"tinystr/struct.TinyAsciiStr.html\" title=\"struct tinystr::TinyAsciiStr\">TinyAsciiStr</a>&lt;N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_ascii_alphabetic\" class=\"method\"><a class=\"src rightside\" href=\"src/tinystr/ascii.rs.html#301-303\">source</a><h4 class=\"code-header\">pub const fn <a href=\"tinystr/struct.TinyAsciiStr.html#tymethod.is_ascii_alphabetic\" class=\"fn\">is_ascii_alphabetic</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Checks if the value is composed of ASCII alphabetic characters:</p>\n<ul>\n<li>U+0041 ‘A’ ..= U+005A ‘Z’, or</li>\n<li>U+0061 ‘a’ ..= U+007A ‘z’.</li>\n</ul>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tinystr::TinyAsciiStr;\n\n<span class=\"kw\">let </span>s1: TinyAsciiStr&lt;<span class=\"number\">4</span>&gt; = <span class=\"string\">\"Test\"</span>.parse().expect(<span class=\"string\">\"Failed to parse.\"</span>);\n<span class=\"kw\">let </span>s2: TinyAsciiStr&lt;<span class=\"number\">4</span>&gt; = <span class=\"string\">\"Te3t\"</span>.parse().expect(<span class=\"string\">\"Failed to parse.\"</span>);\n\n<span class=\"macro\">assert!</span>(s1.is_ascii_alphabetic());\n<span class=\"macro\">assert!</span>(!s2.is_ascii_alphabetic());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_ascii_alphanumeric\" class=\"method\"><a class=\"src rightside\" href=\"src/tinystr/ascii.rs.html#324-326\">source</a><h4 class=\"code-header\">pub const fn <a href=\"tinystr/struct.TinyAsciiStr.html#tymethod.is_ascii_alphanumeric\" class=\"fn\">is_ascii_alphanumeric</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Checks if the value is composed of ASCII alphanumeric characters:</p>\n<ul>\n<li>U+0041 ‘A’ ..= U+005A ‘Z’, or</li>\n<li>U+0061 ‘a’ ..= U+007A ‘z’, or</li>\n<li>U+0030 ‘0’ ..= U+0039 ‘9’.</li>\n</ul>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tinystr::TinyAsciiStr;\n\n<span class=\"kw\">let </span>s1: TinyAsciiStr&lt;<span class=\"number\">4</span>&gt; = <span class=\"string\">\"A15b\"</span>.parse().expect(<span class=\"string\">\"Failed to parse.\"</span>);\n<span class=\"kw\">let </span>s2: TinyAsciiStr&lt;<span class=\"number\">4</span>&gt; = <span class=\"string\">\"[3@w\"</span>.parse().expect(<span class=\"string\">\"Failed to parse.\"</span>);\n\n<span class=\"macro\">assert!</span>(s1.is_ascii_alphanumeric());\n<span class=\"macro\">assert!</span>(!s2.is_ascii_alphanumeric());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_ascii_numeric\" class=\"method\"><a class=\"src rightside\" href=\"src/tinystr/ascii.rs.html#345-347\">source</a><h4 class=\"code-header\">pub const fn <a href=\"tinystr/struct.TinyAsciiStr.html#tymethod.is_ascii_numeric\" class=\"fn\">is_ascii_numeric</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Checks if the value is composed of ASCII decimal digits:</p>\n<ul>\n<li>U+0030 ‘0’ ..= U+0039 ‘9’.</li>\n</ul>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tinystr::TinyAsciiStr;\n\n<span class=\"kw\">let </span>s1: TinyAsciiStr&lt;<span class=\"number\">4</span>&gt; = <span class=\"string\">\"312\"</span>.parse().expect(<span class=\"string\">\"Failed to parse.\"</span>);\n<span class=\"kw\">let </span>s2: TinyAsciiStr&lt;<span class=\"number\">4</span>&gt; = <span class=\"string\">\"3d\"</span>.parse().expect(<span class=\"string\">\"Failed to parse.\"</span>);\n\n<span class=\"macro\">assert!</span>(s1.is_ascii_numeric());\n<span class=\"macro\">assert!</span>(!s2.is_ascii_numeric());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_ascii_lowercase\" class=\"method\"><a class=\"src rightside\" href=\"src/tinystr/ascii.rs.html#368-375\">source</a><h4 class=\"code-header\">pub const fn <a href=\"tinystr/struct.TinyAsciiStr.html#tymethod.is_ascii_lowercase\" class=\"fn\">is_ascii_lowercase</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Checks if the value is in ASCII lower case.</p>\n<p>All letter characters are checked for case. Non-letter characters are ignored.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tinystr::TinyAsciiStr;\n\n<span class=\"kw\">let </span>s1: TinyAsciiStr&lt;<span class=\"number\">4</span>&gt; = <span class=\"string\">\"teSt\"</span>.parse().expect(<span class=\"string\">\"Failed to parse.\"</span>);\n<span class=\"kw\">let </span>s2: TinyAsciiStr&lt;<span class=\"number\">4</span>&gt; = <span class=\"string\">\"test\"</span>.parse().expect(<span class=\"string\">\"Failed to parse.\"</span>);\n<span class=\"kw\">let </span>s3: TinyAsciiStr&lt;<span class=\"number\">4</span>&gt; = <span class=\"string\">\"001z\"</span>.parse().expect(<span class=\"string\">\"Failed to parse.\"</span>);\n\n<span class=\"macro\">assert!</span>(!s1.is_ascii_lowercase());\n<span class=\"macro\">assert!</span>(s2.is_ascii_lowercase());\n<span class=\"macro\">assert!</span>(s3.is_ascii_lowercase());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_ascii_titlecase\" class=\"method\"><a class=\"src rightside\" href=\"src/tinystr/ascii.rs.html#397-404\">source</a><h4 class=\"code-header\">pub const fn <a href=\"tinystr/struct.TinyAsciiStr.html#tymethod.is_ascii_titlecase\" class=\"fn\">is_ascii_titlecase</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Checks if the value is in ASCII title case.</p>\n<p>This verifies that the first character is ASCII uppercase and all others ASCII lowercase.\nNon-letter characters are ignored.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tinystr::TinyAsciiStr;\n\n<span class=\"kw\">let </span>s1: TinyAsciiStr&lt;<span class=\"number\">4</span>&gt; = <span class=\"string\">\"teSt\"</span>.parse().expect(<span class=\"string\">\"Failed to parse.\"</span>);\n<span class=\"kw\">let </span>s2: TinyAsciiStr&lt;<span class=\"number\">4</span>&gt; = <span class=\"string\">\"Test\"</span>.parse().expect(<span class=\"string\">\"Failed to parse.\"</span>);\n<span class=\"kw\">let </span>s3: TinyAsciiStr&lt;<span class=\"number\">4</span>&gt; = <span class=\"string\">\"001z\"</span>.parse().expect(<span class=\"string\">\"Failed to parse.\"</span>);\n\n<span class=\"macro\">assert!</span>(!s1.is_ascii_titlecase());\n<span class=\"macro\">assert!</span>(s2.is_ascii_titlecase());\n<span class=\"macro\">assert!</span>(s3.is_ascii_titlecase());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_ascii_uppercase\" class=\"method\"><a class=\"src rightside\" href=\"src/tinystr/ascii.rs.html#425-432\">source</a><h4 class=\"code-header\">pub const fn <a href=\"tinystr/struct.TinyAsciiStr.html#tymethod.is_ascii_uppercase\" class=\"fn\">is_ascii_uppercase</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Checks if the value is in ASCII upper case.</p>\n<p>All letter characters are checked for case. Non-letter characters are ignored.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tinystr::TinyAsciiStr;\n\n<span class=\"kw\">let </span>s1: TinyAsciiStr&lt;<span class=\"number\">4</span>&gt; = <span class=\"string\">\"teSt\"</span>.parse().expect(<span class=\"string\">\"Failed to parse.\"</span>);\n<span class=\"kw\">let </span>s2: TinyAsciiStr&lt;<span class=\"number\">4</span>&gt; = <span class=\"string\">\"TEST\"</span>.parse().expect(<span class=\"string\">\"Failed to parse.\"</span>);\n<span class=\"kw\">let </span>s3: TinyAsciiStr&lt;<span class=\"number\">4</span>&gt; = <span class=\"string\">\"001z\"</span>.parse().expect(<span class=\"string\">\"Failed to parse.\"</span>);\n\n<span class=\"macro\">assert!</span>(!s1.is_ascii_uppercase());\n<span class=\"macro\">assert!</span>(s2.is_ascii_uppercase());\n<span class=\"macro\">assert!</span>(!s3.is_ascii_uppercase());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_ascii_alphabetic_lowercase\" class=\"method\"><a class=\"src rightside\" href=\"src/tinystr/ascii.rs.html#457-464\">source</a><h4 class=\"code-header\">pub const fn <a href=\"tinystr/struct.TinyAsciiStr.html#tymethod.is_ascii_alphabetic_lowercase\" class=\"fn\">is_ascii_alphabetic_lowercase</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Checks if the value is composed of ASCII alphabetic lower case characters:</p>\n<ul>\n<li>U+0061 ‘a’ ..= U+007A ‘z’,</li>\n</ul>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tinystr::TinyAsciiStr;\n\n<span class=\"kw\">let </span>s1: TinyAsciiStr&lt;<span class=\"number\">4</span>&gt; = <span class=\"string\">\"Test\"</span>.parse().expect(<span class=\"string\">\"Failed to parse.\"</span>);\n<span class=\"kw\">let </span>s2: TinyAsciiStr&lt;<span class=\"number\">4</span>&gt; = <span class=\"string\">\"Te3t\"</span>.parse().expect(<span class=\"string\">\"Failed to parse.\"</span>);\n<span class=\"kw\">let </span>s3: TinyAsciiStr&lt;<span class=\"number\">4</span>&gt; = <span class=\"string\">\"teSt\"</span>.parse().expect(<span class=\"string\">\"Failed to parse.\"</span>);\n<span class=\"kw\">let </span>s4: TinyAsciiStr&lt;<span class=\"number\">4</span>&gt; = <span class=\"string\">\"test\"</span>.parse().expect(<span class=\"string\">\"Failed to parse.\"</span>);\n<span class=\"kw\">let </span>s5: TinyAsciiStr&lt;<span class=\"number\">4</span>&gt; = <span class=\"string\">\"001z\"</span>.parse().expect(<span class=\"string\">\"Failed to parse.\"</span>);\n\n<span class=\"macro\">assert!</span>(!s1.is_ascii_alphabetic_lowercase());\n<span class=\"macro\">assert!</span>(!s2.is_ascii_alphabetic_lowercase());\n<span class=\"macro\">assert!</span>(!s3.is_ascii_alphabetic_lowercase());\n<span class=\"macro\">assert!</span>(s4.is_ascii_alphabetic_lowercase());\n<span class=\"macro\">assert!</span>(!s5.is_ascii_alphabetic_lowercase());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_ascii_alphabetic_titlecase\" class=\"method\"><a class=\"src rightside\" href=\"src/tinystr/ascii.rs.html#487-494\">source</a><h4 class=\"code-header\">pub const fn <a href=\"tinystr/struct.TinyAsciiStr.html#tymethod.is_ascii_alphabetic_titlecase\" class=\"fn\">is_ascii_alphabetic_titlecase</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Checks if the value is composed of ASCII alphabetic, with the first character being ASCII uppercase, and all others ASCII lowercase.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tinystr::TinyAsciiStr;\n\n<span class=\"kw\">let </span>s1: TinyAsciiStr&lt;<span class=\"number\">4</span>&gt; = <span class=\"string\">\"Test\"</span>.parse().expect(<span class=\"string\">\"Failed to parse.\"</span>);\n<span class=\"kw\">let </span>s2: TinyAsciiStr&lt;<span class=\"number\">4</span>&gt; = <span class=\"string\">\"Te3t\"</span>.parse().expect(<span class=\"string\">\"Failed to parse.\"</span>);\n<span class=\"kw\">let </span>s3: TinyAsciiStr&lt;<span class=\"number\">4</span>&gt; = <span class=\"string\">\"teSt\"</span>.parse().expect(<span class=\"string\">\"Failed to parse.\"</span>);\n<span class=\"kw\">let </span>s4: TinyAsciiStr&lt;<span class=\"number\">4</span>&gt; = <span class=\"string\">\"test\"</span>.parse().expect(<span class=\"string\">\"Failed to parse.\"</span>);\n<span class=\"kw\">let </span>s5: TinyAsciiStr&lt;<span class=\"number\">4</span>&gt; = <span class=\"string\">\"001z\"</span>.parse().expect(<span class=\"string\">\"Failed to parse.\"</span>);\n\n<span class=\"macro\">assert!</span>(s1.is_ascii_alphabetic_titlecase());\n<span class=\"macro\">assert!</span>(!s2.is_ascii_alphabetic_titlecase());\n<span class=\"macro\">assert!</span>(!s3.is_ascii_alphabetic_titlecase());\n<span class=\"macro\">assert!</span>(!s4.is_ascii_alphabetic_titlecase());\n<span class=\"macro\">assert!</span>(!s5.is_ascii_alphabetic_titlecase());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_ascii_alphabetic_uppercase\" class=\"method\"><a class=\"src rightside\" href=\"src/tinystr/ascii.rs.html#519-526\">source</a><h4 class=\"code-header\">pub const fn <a href=\"tinystr/struct.TinyAsciiStr.html#tymethod.is_ascii_alphabetic_uppercase\" class=\"fn\">is_ascii_alphabetic_uppercase</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Checks if the value is composed of ASCII alphabetic upper case characters:</p>\n<ul>\n<li>U+0041 ‘A’ ..= U+005A ‘Z’,</li>\n</ul>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tinystr::TinyAsciiStr;\n\n<span class=\"kw\">let </span>s1: TinyAsciiStr&lt;<span class=\"number\">4</span>&gt; = <span class=\"string\">\"Test\"</span>.parse().expect(<span class=\"string\">\"Failed to parse.\"</span>);\n<span class=\"kw\">let </span>s2: TinyAsciiStr&lt;<span class=\"number\">4</span>&gt; = <span class=\"string\">\"Te3t\"</span>.parse().expect(<span class=\"string\">\"Failed to parse.\"</span>);\n<span class=\"kw\">let </span>s3: TinyAsciiStr&lt;<span class=\"number\">4</span>&gt; = <span class=\"string\">\"teSt\"</span>.parse().expect(<span class=\"string\">\"Failed to parse.\"</span>);\n<span class=\"kw\">let </span>s4: TinyAsciiStr&lt;<span class=\"number\">4</span>&gt; = <span class=\"string\">\"TEST\"</span>.parse().expect(<span class=\"string\">\"Failed to parse.\"</span>);\n<span class=\"kw\">let </span>s5: TinyAsciiStr&lt;<span class=\"number\">4</span>&gt; = <span class=\"string\">\"001z\"</span>.parse().expect(<span class=\"string\">\"Failed to parse.\"</span>);\n\n<span class=\"macro\">assert!</span>(!s1.is_ascii_alphabetic_uppercase());\n<span class=\"macro\">assert!</span>(!s2.is_ascii_alphabetic_uppercase());\n<span class=\"macro\">assert!</span>(!s3.is_ascii_alphabetic_uppercase());\n<span class=\"macro\">assert!</span>(s4.is_ascii_alphabetic_uppercase());\n<span class=\"macro\">assert!</span>(!s5.is_ascii_alphabetic_uppercase());</code></pre></div>\n</div></details></div></details>",0,"tinystr::TinyStr4","tinystr::TinyStr8","tinystr::TinyStr16"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TinyAsciiStr%3CN%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tinystr/ascii.rs.html#571-634\">source</a><a href=\"#impl-TinyAsciiStr%3CN%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.usize.html\">usize</a>&gt; <a class=\"struct\" href=\"tinystr/struct.TinyAsciiStr.html\" title=\"struct tinystr::TinyAsciiStr\">TinyAsciiStr</a>&lt;N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_ascii_lowercase\" class=\"method\"><a class=\"src rightside\" href=\"src/tinystr/ascii.rs.html#587-589\">source</a><h4 class=\"code-header\">pub const fn <a href=\"tinystr/struct.TinyAsciiStr.html#tymethod.to_ascii_lowercase\" class=\"fn\">to_ascii_lowercase</a>(self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Converts this type to its ASCII lower case equivalent in-place.</p>\n<p>ASCII letters ‘A’ to ‘Z’ are mapped to ‘a’ to ‘z’, other characters are unchanged.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tinystr::TinyAsciiStr;\n\n<span class=\"kw\">let </span>s1: TinyAsciiStr&lt;<span class=\"number\">4</span>&gt; = <span class=\"string\">\"TeS3\"</span>.parse().expect(<span class=\"string\">\"Failed to parse.\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;*</span>s1.to_ascii_lowercase(), <span class=\"string\">\"tes3\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_ascii_titlecase\" class=\"method\"><a class=\"src rightside\" href=\"src/tinystr/ascii.rs.html#607-614\">source</a><h4 class=\"code-header\">pub const fn <a href=\"tinystr/struct.TinyAsciiStr.html#tymethod.to_ascii_titlecase\" class=\"fn\">to_ascii_titlecase</a>(self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Converts this type to its ASCII title case equivalent in-place.</p>\n<p>The first character is converted to ASCII uppercase; the remaining characters\nare converted to ASCII lowercase.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tinystr::TinyAsciiStr;\n\n<span class=\"kw\">let </span>s1: TinyAsciiStr&lt;<span class=\"number\">4</span>&gt; = <span class=\"string\">\"teSt\"</span>.parse().expect(<span class=\"string\">\"Failed to parse.\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;*</span>s1.to_ascii_titlecase(), <span class=\"string\">\"Test\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_ascii_uppercase\" class=\"method\"><a class=\"src rightside\" href=\"src/tinystr/ascii.rs.html#631-633\">source</a><h4 class=\"code-header\">pub const fn <a href=\"tinystr/struct.TinyAsciiStr.html#tymethod.to_ascii_uppercase\" class=\"fn\">to_ascii_uppercase</a>(self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Converts this type to its ASCII upper case equivalent in-place.</p>\n<p>ASCII letters ‘a’ to ‘z’ are mapped to ‘A’ to ‘Z’, other characters are unchanged.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tinystr::TinyAsciiStr;\n\n<span class=\"kw\">let </span>s1: TinyAsciiStr&lt;<span class=\"number\">4</span>&gt; = <span class=\"string\">\"Tes3\"</span>.parse().expect(<span class=\"string\">\"Failed to parse.\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;*</span>s1.to_ascii_uppercase(), <span class=\"string\">\"TES3\"</span>);</code></pre></div>\n</div></details></div></details>",0,"tinystr::TinyStr4","tinystr::TinyStr8","tinystr::TinyStr16"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TinyAsciiStr%3CN%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tinystr/unvalidated.rs.html#42-48\">source</a><a href=\"#impl-TinyAsciiStr%3CN%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.usize.html\">usize</a>&gt; <a class=\"struct\" href=\"tinystr/struct.TinyAsciiStr.html\" title=\"struct tinystr::TinyAsciiStr\">TinyAsciiStr</a>&lt;N&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"method.to_unvalidated\" class=\"method\"><a class=\"src rightside\" href=\"src/tinystr/unvalidated.rs.html#45-47\">source</a><h4 class=\"code-header\">pub const fn <a href=\"tinystr/struct.TinyAsciiStr.html#tymethod.to_unvalidated\" class=\"fn\">to_unvalidated</a>(self) -&gt; <a class=\"struct\" href=\"tinystr/struct.UnvalidatedTinyAsciiStr.html\" title=\"struct tinystr::UnvalidatedTinyAsciiStr\">UnvalidatedTinyAsciiStr</a>&lt;N&gt;</h4></section></div></details>",0,"tinystr::TinyStr4","tinystr::TinyStr8","tinystr::TinyStr16"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ULE-for-TinyAsciiStr%3CN%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tinystr/ule.rs.html#19-32\">source</a><a href=\"#impl-ULE-for-TinyAsciiStr%3CN%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"zerovec/ule/trait.ULE.html\" title=\"trait zerovec::ule::ULE\">ULE</a> for <a class=\"struct\" href=\"tinystr/struct.TinyAsciiStr.html\" title=\"struct tinystr::TinyAsciiStr\">TinyAsciiStr</a>&lt;N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.validate_byte_slice\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tinystr/ule.rs.html#21-31\">source</a><a href=\"#method.validate_byte_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/ule/trait.ULE.html#tymethod.validate_byte_slice\" class=\"fn\">validate_byte_slice</a>(bytes: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"zerovec/error/enum.ZeroVecError.html\" title=\"enum zerovec::error::ZeroVecError\">ZeroVecError</a>&gt;</h4></section></summary><div class='docblock'>Validates a byte slice, <code>&amp;[u8]</code>. <a href=\"zerovec/ule/trait.ULE.html#tymethod.validate_byte_slice\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.parse_byte_slice\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/ule/mod.rs.html#101\">source</a><a href=\"#method.parse_byte_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/ule/trait.ULE.html#method.parse_byte_slice\" class=\"fn\">parse_byte_slice</a>(bytes: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;[Self], <a class=\"enum\" href=\"zerovec/error/enum.ZeroVecError.html\" title=\"enum zerovec::error::ZeroVecError\">ZeroVecError</a>&gt;</h4></section></summary><div class='docblock'>Parses a byte slice, <code>&amp;[u8]</code>, and return it as <code>&amp;[Self]</code> with the same lifetime. <a href=\"zerovec/ule/trait.ULE.html#method.parse_byte_slice\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_byte_slice_unchecked\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/ule/mod.rs.html#132\">source</a><a href=\"#method.from_byte_slice_unchecked\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"zerovec/ule/trait.ULE.html#method.from_byte_slice_unchecked\" class=\"fn\">from_byte_slice_unchecked</a>(bytes: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.u8.html\">u8</a>]) -&gt; &amp;[Self]</h4></section></summary><div class='docblock'>Takes a byte slice, <code>&amp;[u8]</code>, and return it as <code>&amp;[Self]</code> with the same lifetime, assuming\nthat this byte slice has previously been run through <a href=\"zerovec/ule/trait.ULE.html#method.parse_byte_slice\" title=\"associated function zerovec::ule::ULE::parse_byte_slice::parse_byte_slice\"><code>Self::parse_byte_slice()</code></a> with\nsuccess. <a href=\"zerovec/ule/trait.ULE.html#method.from_byte_slice_unchecked\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_byte_slice\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/ule/mod.rs.html#151\">source</a><a href=\"#method.as_byte_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/ule/trait.ULE.html#method.as_byte_slice\" class=\"fn\">as_byte_slice</a>(slice: &amp;[Self]) -&gt; &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.u8.html\">u8</a>]</h4></section></summary><div class='docblock'>Given <code>&amp;[Self]</code>, returns a <code>&amp;[u8]</code> with the same lifetime. <a href=\"zerovec/ule/trait.ULE.html#method.as_byte_slice\">Read more</a></div></details></div></details>","ULE","tinystr::TinyStr4","tinystr::TinyStr8","tinystr::TinyStr16"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ZeroMapKV%3C'a%3E-for-TinyAsciiStr%3CN%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tinystr/ule.rs.html#48-53\">source</a><a href=\"#impl-ZeroMapKV%3C'a%3E-for-TinyAsciiStr%3CN%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"zerovec/map/kv/trait.ZeroMapKV.html\" title=\"trait zerovec::map::kv::ZeroMapKV\">ZeroMapKV</a>&lt;'a&gt; for <a class=\"struct\" href=\"tinystr/struct.TinyAsciiStr.html\" title=\"struct tinystr::TinyAsciiStr\">TinyAsciiStr</a>&lt;N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Container\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/tinystr/ule.rs.html#49\">source</a><a href=\"#associatedtype.Container\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"zerovec/map/kv/trait.ZeroMapKV.html#associatedtype.Container\" class=\"associatedtype\">Container</a> = <a class=\"struct\" href=\"zerovec/zerovec/struct.ZeroVec.html\" title=\"struct zerovec::zerovec::ZeroVec\">ZeroVec</a>&lt;'a, <a class=\"struct\" href=\"tinystr/struct.TinyAsciiStr.html\" title=\"struct tinystr::TinyAsciiStr\">TinyAsciiStr</a>&lt;N&gt;&gt;</h4></section></summary><div class='docblock'>The container that can be used with this type: <a href=\"zerovec/zerovec/struct.ZeroVec.html\" title=\"struct zerovec::zerovec::ZeroVec\"><code>ZeroVec</code></a> or <a href=\"zerovec/varzerovec/vec/enum.VarZeroVec.html\" title=\"enum zerovec::varzerovec::vec::VarZeroVec\"><code>VarZeroVec</code></a>.</div></details><section id=\"associatedtype.Slice\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/tinystr/ule.rs.html#50\">source</a><a href=\"#associatedtype.Slice\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"zerovec/map/kv/trait.ZeroMapKV.html#associatedtype.Slice\" class=\"associatedtype\">Slice</a> = <a class=\"struct\" href=\"zerovec/zerovec/slice/struct.ZeroSlice.html\" title=\"struct zerovec::zerovec::slice::ZeroSlice\">ZeroSlice</a>&lt;<a class=\"struct\" href=\"tinystr/struct.TinyAsciiStr.html\" title=\"struct tinystr::TinyAsciiStr\">TinyAsciiStr</a>&lt;N&gt;&gt;</h4></section><details class=\"toggle\" open><summary><section id=\"associatedtype.GetType\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/tinystr/ule.rs.html#51\">source</a><a href=\"#associatedtype.GetType\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"zerovec/map/kv/trait.ZeroMapKV.html#associatedtype.GetType\" class=\"associatedtype\">GetType</a> = <a class=\"struct\" href=\"tinystr/struct.TinyAsciiStr.html\" title=\"struct tinystr::TinyAsciiStr\">TinyAsciiStr</a>&lt;N&gt;</h4></section></summary><div class='docblock'>The type produced by <code>Container::get()</code> <a href=\"zerovec/map/kv/trait.ZeroMapKV.html#associatedtype.GetType\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.OwnedType\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/tinystr/ule.rs.html#52\">source</a><a href=\"#associatedtype.OwnedType\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"zerovec/map/kv/trait.ZeroMapKV.html#associatedtype.OwnedType\" class=\"associatedtype\">OwnedType</a> = <a class=\"struct\" href=\"tinystr/struct.TinyAsciiStr.html\" title=\"struct tinystr::TinyAsciiStr\">TinyAsciiStr</a>&lt;N&gt;</h4></section></summary><div class='docblock'>The type produced by <code>Container::replace()</code> and <code>Container::remove()</code>,\nalso used during deserialization. If <code>Self</code> is human readable serialized,\ndeserializing to <code>Self::OwnedType</code> should produce the same value once\npassed through <code>Self::owned_as_self()</code> <a href=\"zerovec/map/kv/trait.ZeroMapKV.html#associatedtype.OwnedType\">Read more</a></div></details></div></details>","ZeroMapKV<'a>","tinystr::TinyStr4","tinystr::TinyStr8","tinystr::TinyStr16"],["<section id=\"impl-Copy-for-TinyAsciiStr%3CN%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tinystr/ascii.rs.html#13\">source</a><a href=\"#impl-Copy-for-TinyAsciiStr%3CN%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for <a class=\"struct\" href=\"tinystr/struct.TinyAsciiStr.html\" title=\"struct tinystr::TinyAsciiStr\">TinyAsciiStr</a>&lt;N&gt;</h3></section>","Copy","tinystr::TinyStr4","tinystr::TinyStr8","tinystr::TinyStr16"],["<section id=\"impl-Eq-for-TinyAsciiStr%3CN%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tinystr/ascii.rs.html#13\">source</a><a href=\"#impl-Eq-for-TinyAsciiStr%3CN%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"tinystr/struct.TinyAsciiStr.html\" title=\"struct tinystr::TinyAsciiStr\">TinyAsciiStr</a>&lt;N&gt;</h3></section>","Eq","tinystr::TinyStr4","tinystr::TinyStr8","tinystr::TinyStr16"],["<section id=\"impl-StructuralPartialEq-for-TinyAsciiStr%3CN%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tinystr/ascii.rs.html#13\">source</a><a href=\"#impl-StructuralPartialEq-for-TinyAsciiStr%3CN%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"struct\" href=\"tinystr/struct.TinyAsciiStr.html\" title=\"struct tinystr::TinyAsciiStr\">TinyAsciiStr</a>&lt;N&gt;</h3></section>","StructuralPartialEq","tinystr::TinyStr4","tinystr::TinyStr8","tinystr::TinyStr16"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[81450]}