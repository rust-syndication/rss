searchState.loadedDescShard("icu_locid_transform", 0, "Canonicalization of locale identifiers based on <code>CLDR</code> data.\nAn error originating inside of the data provider.\nRepresents the direction of a script.\nThe script is left-to-right.\nImplements the algorithm defined in <em>UTS #35: Annex C, </em>‚Ä¶\nProvides methods to determine the direction of a locale.\nImplements the <em>Add Likely Subtags</em> and <em>Remove Likely Subtags</em>\nImplements the algorithm defined in <em>UTS #35: Locale </em>‚Ä¶\nA list of error outcomes for various operations in this ‚Ä¶\nThe canonicalization operation modified the locale.\nThe script is right-to-left.\nUsed to track the result of a transformation operation ‚Ä¶\nThe canonicalization operation did not modify the locale.\nCreates a borrowed version of this fallbacker for ‚Ä¶\nThe canonicalize method potentially updates a passed in ‚Ä¶\nTools for locale fallback, enabling arbitrary input ‚Ä¶\nAssociates a configuration with this fallbacker.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the script direction of the given locale.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the given locale is left-to-right.\nReturns whether the given locale is right-to-left.\nThe maximize method potentially updates a passed in locale ‚Ä¶\nThis returns a new Locale that is the result of running the\nThis returns a new Locale that is the result of running the\nA constructor which creates a <code>LocaleCanonicalizer</code> from ‚Ä¶\nCreates a <code>LocaleDirectionality</code> from compiled data.\nCreates a <code>LocaleExpander</code> with compiled data for ‚Ä¶\nCreates a <code>LocaleFallbacker</code> with compiled fallback data ‚Ä¶\nCreates a <code>LocaleExpander</code> with compiled data for all ‚Ä¶\nCreates a <code>LocaleCanonicalizer</code> with a custom <code>LocaleExpander</code> ‚Ä¶\nCreates a <code>LocaleDirectionality</code> with a custom <code>LocaleExpander</code>‚Ä¶\nCreates a <code>LocaleFallbacker</code> without fallback data. Using ‚Ä¶\nüöß [Unstable] Data provider struct definitions for this ‚Ä¶\nA version of <code>Self::new_extended</code> that uses custom data ‚Ä¶\nA version of [<code>Self :: new_extended</code>] that uses custom data ‚Ä¶\nA version of <code>Self::new</code> that uses custom data provided by a ‚Ä¶\nA version of <code>Self::new</code> that uses custom data provided by a ‚Ä¶\nA version of <code>Self::new</code> that uses custom data provided by a ‚Ä¶\nA version of <code>Self::new</code> that uses custom data provided by a ‚Ä¶\nA version of <code>Self::new</code> that uses custom data provided by ‚Ä¶\nA version of <code>Self::new</code> that uses custom data provided by ‚Ä¶\nA version of <code>Self::new</code> that uses custom data provided by ‚Ä¶\nA version of [<code>Self :: new</code>] that uses custom data provided ‚Ä¶\nA version of <code>Self::new_with_expander</code> that uses custom data ‚Ä¶\nA version of <code>Self::new_with_expander</code> that uses custom data ‚Ä¶\nA version of <code>Self::new_with_expander</code> that uses custom data ‚Ä¶\nCollation-specific fallback rules. Similar to language ‚Ä¶\nCollation supplement\nPrioritize the language. This is the default behavior.\nConfiguration settings for a particular fallback operation.\nIteration type for locale fallback operations.\nHint for which subtag to prioritize during fallback.\nWhat additional data is required to load when performing ‚Ä¶\nBorrowed version of <code>LocaleFallbacker</code>.\nA <code>LocaleFallbackerBorrowed</code> with an associated ‚Ä¶\nPrioritize the region.\nConst-friendly version of <code>Default::default</code>.\nAn extension keyword to retain during locale fallback.\nCreates an iterator based on a <code>DataLocale</code>.\nFallback supplement data key to customize fallback rules.\nAssociates a configuration with this fallbacker.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBorrows the current <code>DataLocale</code> under fallback.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStrategy for choosing which subtags to drop during locale ‚Ä¶\nCheaply converts a [<code>LocaleFallbackerBorrowed&lt;&#39;static&gt;</code>] ‚Ä¶\nPerforms one step of the locale fallback algorithm.\nTakes the current <code>DataLocale</code> under fallback.\nThis alias data is used for locale canonicalization. Each ‚Ä¶\nMarker type for <code>AliasesV1</code>: ‚Äúlocid_transform/aliases@1‚Äù\nThis alias data is used for locale canonicalization. Each ‚Ä¶\nMarker type for <code>AliasesV2</code>: ‚Äúlocid_transform/aliases@2‚Äù\nBaked data\nMarker type for <code>LocaleFallbackSupplementV1</code>: ‚Äú‚Ä¶\n<code>ZZ</code> is the most common region, so it is defaulted for data ‚Ä¶\n<code>Latn</code> is the most common script, so it is defaulted for ‚Ä¶\nA triplet of strings with a EncodeAsVarULE implementation.\n<code>VarULE</code> type for <code>LanguageStrStrPair</code>. See <code>LanguageStrStrPair</code> ‚Ä¶\nThis likely subtags data is used for full coverage of ‚Ä¶\nMarker type for <code>LikelySubtagsExtendedV1</code>: ‚Äú‚Ä¶\nThis likely subtags data is used for the minimize and ‚Ä¶\nMarker type for <code>LikelySubtagsForLanguageV1</code>: ‚Äú‚Ä¶\nThis likely subtags data is used for the minimize and ‚Ä¶\nMarker type for <code>LikelySubtagsForScriptRegionV1</code>: ‚Äú‚Ä¶\nThis likely subtags data is used for the minimize and ‚Ä¶\nMarker type for <code>LikelySubtagsV1</code>: ‚Äú‚Ä¶\nLocale fallback rules derived from likely subtags data.\nMarker type for <code>LocaleFallbackLikelySubtagsV1</code>: ‚Äú‚Ä¶\nLocale fallback rules derived from CLDR parent locales ‚Ä¶\nMarker type for <code>LocaleFallbackParentsV1</code>: ‚Äú‚Ä¶\nKey-specific supplemental fallback data.\nThis directionality data is used to determine the script ‚Ä¶\nMarker type for <code>ScriptDirectionV1</code>: ‚Äú‚Ä¶\nA pair of strings with a EncodeAsVarULE implementation.\n<code>VarULE</code> type for <code>StrStrPair</code>. See <code>StrStrPair</code> for ‚Ä¶\n<code>[region] -&gt; [region]+</code>\n<code>[region] -&gt; [region]+</code>\nAccess the VarULE type behind tuple struct field #0\nAccess the VarULE type behind tuple struct field #1\nAccess the VarULE type behind tuple struct field #1\nAccess the VarULE type behind tuple struct field #2\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMap from language to the default region in that language. ‚Ä¶\nMap from language to the default script in that language. ‚Ä¶\n<code>[langid] -&gt; [langid]</code> This is not a map as it‚Äôs searched ‚Ä¶\n<code>[langid] -&gt; [langid]</code> This is not a map as it‚Äôs searched ‚Ä¶\nJust language.\nJust language.\nJust language.\n<code>[language{2}] -&gt; [langid]</code>\n<code>[language{2}] -&gt; [langid]</code>\n<code>[language{3}] -&gt; [langid]</code>\n<code>[language{3}] -&gt; [langid]</code>\nLanguage and region.\nLanguage and region.\nLanguage and region.\nLanguage and script.\nLanguage and script.\nLanguage and script.\n<code>[language(-variant)+\\] -&gt; [langid]</code> This is not a map as it‚Ä¶\n<code>[language, variant(-variant)*] -&gt; [langid]</code> This is not a ‚Ä¶\nMap from language-region pairs to a script. Only populated ‚Ä¶\nMap from language-script pairs to a region. Only populated ‚Ä¶\nScripts in left-to-right direction.\nMap from language identifier to language identifier, ‚Ä¶\nAdditional parent locales to supplement the common ones.\nJust region.\nJust region.\nJust region.\n<code>[region{2}] -&gt; [region]</code>\n<code>[region{2}] -&gt; [region]</code>\n<code>[region{3}] -&gt; [region]</code>\n<code>[region{3}] -&gt; [region]</code>\nScripts in right-to-left direction.\n<code>[script] -&gt; [script]</code>\n<code>[script] -&gt; [script]</code>\nJust script.\nJust script.\nJust script.\nScript and region.\nScript and region.\nScript and region.\n<code>sgn-[region] -&gt; [language]</code>\n<code>sgn-[region] -&gt; [language]</code>\n<code>[value{7}] -&gt; [value{7}]</code>\n<code>[value{7}] -&gt; [value{7}]</code>\nUndefined.\nUndefined.\nDefault values for Unicode extension keywords.\n<code>[variant] -&gt; [variant]</code>\n<code>[variant] -&gt; [variant]</code>")